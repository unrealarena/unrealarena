/*
 * CBSE GPL Source Code
 * Copyright (C) 2016  Unreal Arena
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#ifndef HEALTH_COMPONENT_H_
#define HEALTH_COMPONENT_H_

#include "../backend/CBSEBackend.h"
#include "../backend/CBSEComponents.h"

class HealthComponent: public HealthComponentBase {

	public:
		// ///////////////////// //
		// Autogenerated Members //
		// ///////////////////// //

		/**
		 * @brief Default constructor of the HealthComponent.
		 * @param entity The entity that owns the component instance.
		 * @param maxHealth An initialization parameter.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
#ifdef UNREALARENA
		HealthComponent(Entity& entity);
#else
		HealthComponent(Entity& entity, float maxHealth);
#endif

		/**
		 * @brief Handle the PrepareNetCode message.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		void HandlePrepareNetCode();

		/**
		 * @brief Handle the Heal message.
		 * @param amount
		 * @param source
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
#ifdef UNREALARENA
		void HandleHeal(int amount, gentity_t* source);
#else
		void HandleHeal(float amount, gentity_t* source);
#endif

		/**
		 * @brief Handle the Damage message.
		 * @param amount
		 * @param source
		 * @param location
		 * @param direction
		 * @param flags
		 * @param meansOfDeath
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
#ifdef UNREALARENA
		void HandleDamage(int amount, gentity_t* source, Util::optional<Vec3> location, Util::optional<Vec3> direction, int flags, meansOfDeath_t meansOfDeath);
#else
		void HandleDamage(float amount, gentity_t* source, Util::optional<Vec3> location, Util::optional<Vec3> direction, int flags, meansOfDeath_t meansOfDeath);
#endif

		// ///////////////////// //

#ifndef UNREALARENA
		void SetHealth(float health);
		void SetMaxHealth(float maxHealth, bool scaleHealth = false);
#endif

		/**
		 * @brief Copies state from another HealthComponent.
		 * @note Copies the current health's relative, not absolute value.
		 */
		HealthComponent& operator=(const HealthComponent& other);

#ifdef UNREALARENA
		constexpr static int MAX_HEALTH = 100;
#endif
#ifdef UNREALARENA
		bool Alive() const { return health > 0; }
		bool FullHealth() const { return health >= MAX_HEALTH; }
		int Health() const { return health; }
		int MaxHealth() const { return MAX_HEALTH; }
		float HealthFraction() const { return Math::Clamp((float)health / MAX_HEALTH, 0.0f, 1.0f); }
#else
		bool Alive() const { return health > 0.0f; }
		bool FullHealth() const { return health >= maxHealth; }
		float Health() const { return health; }
		float MaxHealth() const { return maxHealth; }
		float HealthFraction() const { return Math::Clamp(health / maxHealth, 0.0f, 1.0f); }
#endif

	private:

#ifdef UNREALARENA
		int health;
#else
		float health;
#endif

#ifndef UNREALARENA
		/**
		 * @brief Whenever health is restored, this makes sure the damage accounts are scaled down
		 *        so that they can't exceed the missing health.
		 */
		void ScaleDamageAccounts(float healthRestored);
#endif

		void SpawnHitNotification(gentity_t *attacker);
};

#endif // HEALTH_COMPONENT_H_
