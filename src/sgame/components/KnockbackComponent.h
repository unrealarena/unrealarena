/*
 * CBSE GPL Source Code
 * Copyright (C) 2016  Unreal Arena
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#ifndef KNOCKBACK_COMPONENT_H_
#define KNOCKBACK_COMPONENT_H_

#include "../backend/CBSEBackend.h"
#include "../backend/CBSEComponents.h"

class KnockbackComponent: public KnockbackComponentBase {

	public:
		// ///////////////////// //
		// Autogenerated Members //
		// ///////////////////// //

		/**
		 * @brief Default constructor of the KnockbackComponent.
		 * @param entity The entity that owns the component instance.
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
		KnockbackComponent(Entity& entity);

		/**
		 * @brief Handle the Damage message.
		 * @param amount
		 * @param source
		 * @param location
		 * @param direction
		 * @param flags
		 * @param meansOfDeath
		 * @note This method is an interface for autogenerated code, do not modify its signature.
		 */
#ifdef UNREALARENA
		void HandleDamage(int amount, gentity_t* source, Util::optional<Vec3> location, Util::optional<Vec3> direction, int flags, meansOfDeath_t meansOfDeath);
#else
		void HandleDamage(float amount, gentity_t* source, Util::optional<Vec3> location, Util::optional<Vec3> direction, int flags, meansOfDeath_t meansOfDeath);
#endif

		// ///////////////////// //

#ifdef UNREALARENA
		constexpr static int   DAMAGE_TO_KNOCKBACK      =   5;  // (1000 / KNOCKBACK_NORMAL_MASS)
		constexpr static int   KNOCKBACK_NORMAL_MASS    = 200;
		constexpr static int   KNOCKBACK_MIN_PMOVE_TIME =  50;
		constexpr static int   KNOCKBACK_MAX_PMOVE_TIME = 200;
#else
		constexpr static float DAMAGE_TO_KNOCKBACK   = 5.0f;
		constexpr static float KNOCKBACK_MIN_MASSMOD = 0.5f;
		constexpr static float KNOCKBACK_MAX_MASSMOD = 2.0f;
		constexpr static float KNOCKBACK_NORMAL_MASS = 100.0f;
		constexpr static int   KNOCKBACK_PMOVE_TIME  = 50;
#endif

	private:

};

#endif // KNOCKBACK_COMPONENT_H_

